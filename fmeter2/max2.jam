'Copyright (C) 1991-2009 Altera Corporation
'Your use of Altera Corporation's design tools, logic functions 
'and other software and tools, and its AMPP partner logic 
'functions, and any output files from any of the foregoing 
'(including device programming or simulation files), and any 
'associated documentation or information are expressly subject 
'to the terms and conditions of the Altera Program License 
'Subscription Agreement, Altera MegaCore Function License 
'Agreement, or other applicable license agreement, including, 
'without limitation, that your use is for the sole purpose of 
'programming logic devices manufactured by Altera and sold by 
'Altera or its authorized distributors.  Please refer to the 
'applicable agreement for further details.

'Device #1: EPM7128S - C:/altera/91/quartus/my/fmeter2/max2.pof Wed Jul 27 19:42:47 2011


NOTE "CREATOR" "QUARTUS II JAM COMPOSER 9.1";
NOTE "DATE" "2011/07/27";
NOTE "DEVICE" "EPM7128S";
NOTE "FILE" "max2.pof";
NOTE "TARGET" "1";
NOTE "IDCODE" "071280DD";
NOTE "USERCODE" "0000FFFF";
NOTE "CHECKSUM" "0015F85A";
NOTE "SAVE_DATA" "DEVICE_DATA";
NOTE "SAVE_DATA_VARIABLES" "V0, A12, A13, A21, A22, A25, A43, A92, A94, A95, A105, A109, A111";
NOTE "STAPL_VERSION" "JESD71";
NOTE "JAM_VERSION" "2.0";
NOTE "ALG_VERSION" "51";
ACTION PROGRAM = L0, DO_BLANK_CHECK OPTIONAL, DO_VERIFY RECOMMENDED,
DO_SECURE OPTIONAL,
DO_READ_UES OPTIONAL,
L27;
ACTION BLANKCHECK = L17,
L27;
ACTION VERIFY = L18,
DO_READ_UES OPTIONAL,
L27;
ACTION ERASE = L24, DO_BLANK_CHECK OPTIONAL,
L27;
ACTION READ_UES = L23, L27;
DATA DEVICE_DATA;
INTEGER V0 = 1;
INTEGER V1 = 0;
BOOLEAN V185 = 0;
BOOLEAN V193 = 0;
INTEGER A12[1] = 4;
INTEGER A105[1] = 0;
INTEGER A59[1] = 0;
INTEGER A60[1] = 0;
INTEGER A61[1] = 118653149;
INTEGER A13[1] = 5;
INTEGER A25[1] = 10;
INTEGER A43[1] = 0;
INTEGER A109[1] = 0;
INTEGER A111[1] = 0;
INTEGER A125[1] = 0;
BOOLEAN A96[1];
INTEGER A97 = 1;
BOOLEAN A21[104320] = @
mB30086bIJjqQDjHhLqerUUjMhfzUjgNhbYQfK2BrICfKhLkwh_K@rUvlUhtrOi4
6ZbIOiMZYnIli@@zxVl_pw@wl@@@V@@@@_Zb@zF6ZXnOi4_ZrlIC_VxzUlktxzzU
ltJhzULfMBjzIjNMgzQQjNhfzQjhMh@oVzNlh@wFzN@rqQlMLxzQPjMhbrUjl@x@
VUzNxXA1j_@@qQjMLhzwRj_hbr@lNeIWIfKBhrU9jKgr1r0YbIfeofTqEjJBhTQ7
jJZHGJWKR@XsuNAdzsl1DamRWUjMxWA1HPK6AZIZOK6bXIjsBeOm@Ujdt@r@WI2r
QTC1Q2qQfKLhrQJlMRbLQfcMBrwmp0@rTzk_hxqVzN3ZzOKitZXrQCcmp0Uztx1Q
2Oz@@XnOCA6xntOzNJGv1h@wk05ZG9X0z1@ltwwzUljdxzwMjKAGVGAbQbd_fVqV
zM_hVwTjMxfbQlFabW@zwkmJ5grwVeNRrYUhtsRzINGfYWd4iMgjzHRyJgzUBuL1
h@RFltRzyUzt3P946JWQjMBhxoEPNsbkokiLsbO4yOG@@xb@Uzt0g1_@lKz@@QHj
MhDCcWQjtQx@MleJhzyQfMJwzQLlMhjbQjNMBzQQlMh9q2jWMeHo2jGBerQl059g
rwzjrxzwUlttxrUV0r0BrQf1v4KhLUPlshtrTzdsh@QQjNgXi7yZ@@7QJWMBrQer
0M@ZQIhMwPjsefNQqAGTImpZ0V2eHhrqQjMJxzQLjMhDrQjrG19_@Fzr_@@xjM@F
Sh2QjrgXM6mAjMJhrQTG19_@@zz@@R5uXXbIfMMBzUQjKBfbQjg4BbYOfKBhfQAD
LJruIi6LZrO4Cc0lsVVzVkN_xzTvy@@x@y@t@trQmu6qUlK3UC8Oq0BvIk8NoXyH
UaBIjsBOC1xvV@_mh@y_j_w@@stx@@Vm86qQfKKhrQRlMBbrQfcMBnIQFMwXbC4u
LKmpCXg6O@NxLzQfK0w3IfKA2LJmqQjdMhzUQjKgXgI4qMXtxL_0FCSzM@5CsYth
zUQl@RXW6mQjsJhzQDjKhb0P3OrN@fVwlsN@qlwlMBxrQfXWCGht_b@@@FyF@V@l
NhXlL4qMXl_f@0vAylNl5GbGeL5Ul7v3kJ84q0IjMxgrwjyMlrlIRGmD3yl@@vrV
lRNV@FGk5hrMj1t6uf@wFuc1UjV_w@6lytx@oi@@Fuca0gA2pDWMgrQOq91K85SZ
XmSImwd_H@qFTWY72kzG0lM2e0ZQj_7wbMjetgjXMlq4un0RrQfX_IGjMtbxwkkm
XCOjMBbrUjN0F3qh@@x@_lFSu3iy@z2y4Ylyh@0ZFe@pzoVl@B3_@V@@@@_VeM3j
WXNhrumX9mQjNA4f1A@wlyN_r7cZ1R@H@_7h@2CoW@bQjG6aeMh@oVvNVmI9yV@z
74q3UlVxwzQj2HA1hlwBzLVr1eKH@bOSGmGK@rU5WQcWMCmQjNJhzO9j7hzWMOu@
_VYN@zkVj_@WgC4KmWWMpmhztN@@xb@U@rWgLu7zOB4f1eJhj2pbG0q42lQW@wlk
0jmOzUlFWYA1AK98Z11jOGVrVjlUhVrVjMMhrQPjMhfrQjcLh@ReqAOj_h5qA4Vz
L@1VDmrOi56ZjMOiMZYnIj2gAX@nOCC6ZjmVi_LYnnGfqg5rMhDqQbcWl9WQfKBu
s3wl_g33d0hnQ@WHIGhrQLfshV0gJ2Qz0ls@lGLjeNhrYQjMReP3urUjhsh@oVzN
lhbQlGpFuzFzt@@Vll@@@Gp6erQfFm39_h@wTTN@5a_1@t@11ZsmxrOVuL32G9Hu
w4KlrO4q2ZG694us0@htx16z8mJBgrwV8MQr6UrW0AL42FX0PX46n06V@U1BT2@R
zkUltRx@UhkNBzyQjMVLt0hrIlXrVmbQjdMhzUQjMBXhh8qI2AnuV2_cGu66qQ9M
6U81NVrV1kz8qY1XhJmhrIVuQ3iLgr6CtWGzXe@tzoVlVAl@@@0yaeNhrAe062yu
Xm@CmdUzdttrlW_aGjMxjvSj7NhrQUjch3IBXW7g8Oa42F0ZWHCWrpfbrAjMMhTQ
QjMj2cRZW2U8OaD29C1tBbI1ZWX@wlMNZnMOCMQ3Eq0x@Vzytg@2eeYW3VGjKhTW
7X4wZ1qwlt2Mg5zIjsX9QWUh@QVzL@X9_WM_tgm@aWzolMWMXuhtwFeF92AOZ06P
8Ok7ezQfhMh@YVvNkB@wlG7DGjtBLeZ6e@_@Fam7erQj4CdA1PuHGaO4MN5_wlsL
@rVPl_hFmo44ZbMPxdxFiE6SNh@7Ef1qVf_38B4xrVz1M_0hrQ@G7JmV_tl@@@hG
z298o4OzMlftwlsJ@rNe5R4Wo31o4IGajeMh@qUlthwzUxGCJ80bA2znW0P8Xn@l
N0Z94W261W_GuQ6ult@DSD320L2jUlts@jULlMB5Oa4_olyL_rNvl_BFKq4KBrU5
MN8ktxzzUls7mOEXWKHm8Ue_hrYUjMROdROjKhDSDI2AuaGzyWrIfMGV6eMhwoTT
Nlh@oFTN@r1lc0BvQTlNx@uwhN3ff2K7ZIXncGuGR4yA3iQxVqE@M5oQ21FKHOi6
ubQjcsxrgUjMwm4v9u132OqfG7ZAe0G3Ku@m8_F8Z@3saDMhrUHElX@LQ5jIhyKV
b_HhqQ5cD3w@FlytxVol@@FOE62ps0AbJfeSEbaIfKIAdorzSlFdwvSUgtxwzUlj
txzeKltZIfKAAbJTfKFbaIfSY281xUFtspfUSkd_5Md1_fK@zlIfeKAbZwhqlAbI
fG1IWNxUl_@tBzy_dy@@_z@t@x@_Qb@@hKG19GhTQLjpfbrQjMMxqkkdxzuqFd7A
G2XURWQjJ@W2CGfrEFjMhKrAjNX7S2ds@UyldJ_vzF35uXm3a8o032F8ae0GHktp
lzzw7lxf_Ul@xvz_@hdIzsUQjMq2COEbIJhKA5dozVSllJwvSV3Ht0@@Nf1AaWwh
KgW2wAu192Z8XW7aWd_zU44F8b_faKQjdMhy_8sDm_@tj@TgFd@hV_@t@z@UlxdM
@F2232Zm0vLAbkNfKKAbIphzlN@@vbUE@pG1ImtxfaKAbIohUAwdMf2eW1tp@Vyg
dt3Km0xzVF1K81bIfru6Imv_gdtxzV_ltxnDi1_tphG6UGQbM9xqFDrNfLXC81Vr
@Tz_l@sxz_YWGeWCCWU@@VG6Fe_AbAc39Y_u4l@h_Xt@0zNhUrQjIsfqATlIheqA
jcJxVVq76m@t@Fc33yz@APjIhaTglcwhqge0CmQjMPS36mf@Etl_@kV@@V@@_VH1
8He0B5RIH1eK1ds@@83CWVl@h@@@Vl@Nh_@VjiMhL6b23MfqQZH81VwtxXW8Hy0p
4PWJn3eLm894A0K150QW2M6uX4X_GYqQjMsfVQwlMhfrUbgsxrIQjMRyA6mh_UF4
a4qw@@HhrAD8e4qQjtHhrQLjMvLS@9u@_@FIeDuK_@7EKEn3mGGzX4PW1HxRWIhr
wOYCmVd@B@@@V@@@V_@lIZDXXmxhm@@@T8@6GfrQD4f7YDn0@xrVU@N@Y28Xu_JG
bMhLukL4el1__Vj2Mg2tt@@nyQW@l@V@@@VQzx@2691MfrUHuOGq294FW1XDLHS3
6mfz@Fk@DeLUjgsxqAe532_N2QbMhgqUzjM@LoQjoBG13KfrEP@@xtVUrdt@rFl@
@@_@l@rNh@7WY1qVjwLhLAPlIhrTQjcIhqw83C8AW4y@Vb6eW1iJ@qKVjMHfzQLb
thbqAjsG6I8oW4Kw@@HhqQDY93OjMx55W1grAdYMmW05Cmt@@l_QzR@frQX2OGuB
Q5qYqHpSOOEC4G69ohrQZ8n0Ub@@nIOGm864GX1IhrQZ_mWmIC8I362v@1LQd_n@
eYQjIfW@DGhrQLO99m@t@F_i42zXAwdM@nXyWk@phmrU8i4F2SJ5V@@@HaOGaB64
MI2ncaGO9C42N5iohz3Bn0Vwt@XbOGaQC4CI21wdWp@r@mnDmVb_VS364Cd1shqA
Z3nWmII8QX4YDfYOOu9UW4KhrA5yV8XHK1lwxyOyD8W23YTgeugb8GcAYWGYeKI8
kcA2kn0jMfzHumGy0U4_d7nrKHuL64yV5XXPG0F94y031tOGe5L4zX1HBOGq76eq
@@FSe421XXu6y8WY722oZ8499QXAYxItGLC8CdmZ9YX8hC8eg4Kw@@HfrALjsfVK
56eqQlZMfrgAjof0AImxzVl@@xVzrwtH1aWAjI9xrQbncOGy5642Y1k@@@zVVbw@
@LIQjMPyK6GhyADAA3YJoWW@DG@t@l@_@Fb_z@qAjI3VvX8cI8AgA21nZmcC8276
iMfr6qY1ygltZYA1j_@VnzdGKU6GhqQLbMxby@lx8wsBKb42voWWlmGVl@RGzI4K
L2nXOGye64tW1_x@@2DBXmNg8u6C2daXO4I8uh42@ZXupI82H322A1j_@VXXbGq2
94LM8HRPGKP64lI5H6yGmNU4MYq1VTE;

BOOLEAN A22[65920] = @
m0200u@@_t@@@d@@@@p0_@@@zF80u@@9Ivg@lT_xVt@@x_xR8TB3c000gIH00W_x
zVd3W4u@_@z@lxx@@96Z@@l@l7GwC0200000GLK100m6f@VE0au@BJ8L3y@@Vpk@
@l56mW9YGYgg2n0qlQ@@S0An@ZvXGPWgg2WGnW@KTrYcW@3VP4Lu@_Vd@eex@xz@
_s@@301000LH500WLS3e1_@@Vj@@_ZO6Vr_@VVGD0000W000WWoW@z@@foW@10WW
Y1Y8102WO0qVl@7K94G94K64U60q@F70Iyl@_@lqZ1W0mywkx@3r4yFat20J08yC
Gl@VE0bWVt@@@_@@tjFnC6eC4UFieI4eI4KCu@z@FGzWwl@@nRW@l@FXlCHA_@@7
X42K6WAY18yOW@l@V@@x_hY4y@004oUexmW@@@Vjgw@xH3ylYkx@@@t@L_Rmp043
0huz@p1e4zVBJmh@@VmZX0b1Xn7y@@@w@@lp@zN5gsvFg@@@kl@@r@_Cm4H4GLL1
00OlrG638cnt3ZLaPDWgg_@fr0@@lh_s@zvlghMSDm@@@fVPm4Y8100WO02UC42J
8WQ0000WGB31P6i@@XRRYAt@@VVyo0@x@t0G000GLL56Pmlx@F@@@V@@x@Xs40KH
04egm@@NAG_@@qC3YyM62UCGY_lF8xH8x1@320_@@k@y6u@h@t@@3fR1mWmO267G
92e64_Dmz@@Vuc1aUzv0GY@x0Pm@@@l@@V_Fh4UcC03c0G0r3LV94uzW@77WGG9y
@uUfBoLL@xydx@@V@@tt_@V0O000eg0000ztJWN2sNLLHCZ@vhltFmB10000mYql
36JWgg_@QP2___zzVL2u@@@pVN@VWN2eYO0qNd@7CoGPZ11Z9000W6ftVUGH5_kh
xRCP0060Gus31eI4uzJ0Q8PI6CaPWmNc85y@@_V_@z@@lxll@tx08G0b1wls@3GJ
8qrWWnAg4IeQi2@@@lOm4H8HLK5KSI8e1_xzzV_OGJb@l@@_VAY_r_@@@zjlCW40
084q0NVEW1A9u@@VDWw1O3w@XH94QcG0w6wFt@DEWI4GjHu16_VV@z@@xul@@p@l
@dl@@NCOY8W0Wg2kD8891@JCZk@x@3Qnm@@xl@@@lsy4sKDmT@@VmD30e_U3kVmV
@@VmD3mYa@3phGuBtbx@@V@t@@1j94G9HOk71KB5_o0@hw@11Pm@@@l@tvl0A60o
RPW9Y8Xgg2WWW9a9qWWR@4GfbqXCeKH6ts@@@693y@@@xlAhD0L2wzwp3LPGe162
7c00Wcm0ZF4xZ1z@@@_@l@3GPGWH30G@z4GX1@@@V_x@z3UyG0gAy@@@R@llt@@h
kt@@T_@@@X8J0xy_lp1KYDc9u@tzt@t@VuBIgSPmtC3yFat64aXmNC46XaOR64_8
1@@@t_@E62BLHWHC22YHnK322oGmI322cGmI92b_mIL3y@@Zxx@_FUJ2__@@3kP0
Y1eFzy@v1jOmV@@VmI600sa4iq3t@z@1Pi90A3_lLL3WQGWM3yttLwN6C10IKLme
4K@@@x@@@t@@IS0qJc6QG7e42aPJHL6y@uRhfoV@0R21yCGLH100Ilt0PF4CI5@l
@@svl@3zPGmt4mVl@76v1@@FWXHg8WC305Wmj8H5adq0@@_t_7YR3MQGe032qQGG
L3u@@@7aHYWlLiqAX0UsCPEXWX6SpoW1n6ut@@F4v6XcJ000KLWM92aPGeA324bG
Wd4GC0zfd@7FiP2XpC8Oa4XSVm@@@FN7VxWM9u@@_sd@2034H2LL101kDW4@_V83
F2S@my462CgI8S62c@WI1PSRtKv1oImtHUB0C000KLL1pD0WIaVmyA2IZnq392Ua
pDh4q@@lx@@@R8j1_xx@zF3Y4kcXvuCu@@1aE2WGe5FKA8ZRxkAFSk1_@z@zVat6
UmWWlC4sCXmNLqpd1@@VlKT_k@scWt@xRD_B1XwD00ztX@F7Wmr9u@@@BOE6X@De
zV2_@@kK_@@Rd@_Bel42Dp0zrx@XNn06@@xWH8n@@7kjRgyOaIm@lXKGQ648e10G
YPzx@@7U03ThPG0UOKpN21Za0kldXGQm8q2CADx1Wl8HAu@@jpV@p@@VFGm4K5X0
epU@FuBC0GLL4S86FlPW@@@V@h_x17oGeF94EO2XrjHWRFut@@t_@@llz@V@@l@1
BPWYgYuGVUuNE32Ja1OIw@12kHG1CG49YAeW7MiAXGf8n@TVlg_@V_@@@D2QGmS6
4Ub4XEYHmSL4oO2XgGIe0Xu@@@tE@f@CY64Md11ZaGWH9Wnt@ttx@Vua60WYY200
WS0ZX40531tyGeUF8gg08KF62da1@FVtw_@@z_E@5uc1XwP0WgYuWbi9ah42dCX0
e_nlx@l@V@@0PI80b4G00zht@FFOa42z911W00X_iH8D6eho@lHn4yvl04W23Xwb
GGVI4mO5_@xND_sDfygzk4l424qWWqAo@l@dl@_tW_s8K5F26XX@sCm@t@VGf64u
cA1FiX@@@zWly849CIxy1@pKv_l@Tyt@xx@t@tl@@VuB6000oEOp4yx_gxTYPa@_
@V0PC0049DSoA0muR70A3XJc00QDt0oU8KK32Fr3@@z@U@V@3zPfW1a8K0d2Amfm
3YAe0G3Ku@0A_FSZ@3pEXGRDmNN@l@@70008054R010wQZ3W600WvbTtjJLLtn@2
8aht@F@3xj17RW@@t4QTz_1QPGPn64Ni1000Gj8X1u@@10382k@F70I00051y000
4000WgK50080G0000Gmt@@DwsHV000n0yke004025000O9IW00000W0001500000
00GM4X1Kbg0W182AA800027W1NFE0XLcmTp6u@xbcqszDhdsAM9jt_sUzPjLM52m
3iw@@B2@1@xjTqt@lz@@ppkli_zrDY5NY3hJ8408220a01m8Pt4y@@yf@xxttz_l
@k@V@zt@NiQW@v@@CXV86K3S@Vtxlx@tz@@l@@@R@x@@_@xlztt@x@l@t@@@T2f6
u_lltNV@dl@x@crDG@_@l@@@V@ttt_@@@zVtVh@hzJV_rlllpENVVVyxU@Kdtrxl
x_tTzzllhpRV@TN_hg@FHeb05EP7L3cDr0ztV@wl@_r@z@x_@@t@VzV5y6u@@ytV
y@F@@t@FtVm@T@l@@wV@@l@jKpW@@_Rt@z@__xlpQt0t@rz_@l@rt@@x_hlN@@Vb
hz@V_@@@XsQGS29e@@zVMx4yVz@l0A3TqRGVh6uV@@tt@@l@@_UVt@@DrpWl@@V@
@lz_@@@z@z_xU@@dz@xlx@@VzNV@g@_@rV@@x@@@tV@ttVXFKUG23h7IvXIao_6_
tkhzT@zxExkdTTnlwfhBsTbN_t_wTVzSh@w@cV@NdhhlR@@z@__@lxer0@@Vtw@_
xSVV@xl@@p@TtzrxOu_@ltz@@V1m6ux_@NV@Jd@vxV_@@@__@@Nbm0V@@t_@l@St
@_xF@@BAO3yV@zx_@@t@V@NQ394UWA5J030;

ENDDATA;
DATA TEMP_DATA;
INTEGER A0[42] =
0, 0, 0, 0, 0, 0, 16, 15, 14, 13, 95, 23, 23, 23, 96, 96, 96, 96, 96, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 15, 791, 791, 791, 791, 317, 293, 281, 273, 261, 253, 237, 791;
INTEGER A1[42] =
2081, 2081, 2081, 2081, 2081, 2081, 16, 16, 16, 16, 3144, 16, 16, 16,3144,1574, 716, 360, 183,1574, 716, 360, 183,3144, 0,1574, 716, 360, 183, 64, 280, 240, 200, 160, 640, 480, 400, 320, 240, 160, 80,3144;
INTEGER A2[42] =
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 165, 165, 165, 165, 0, 0, 0, 0, 0, 0, 0, 165;
INTEGER A3[42] =
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 112, 96, 80, 64, 0, 0, 0, 0, 0, 0, 0, 112;
INTEGER A4[42] =
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 648, 600, 552, 504, 0, 0, 0, 0, 0, 0, 0, 648;
INTEGER A5[42] =
2081, 2081, 2081, 2081, 2081, 2081, 16, 16, 16, 16, 3144, 18, 18, 18,3144,1574, 716, 360, 183,1574, 716, 360, 183,3144, 0,1574, 716, 360, 183, 64, 56, 48, 40, 32, 128, 96, 80, 64, 48, 32, 16,3144;
INTEGER A6[42] =
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 32, 16, 8, 4, 2, 16, 8, 4, 2, 32, 24, 16, 8, 4, 2, 0, 0, 0, 0, 0, 16, 12, 10, 8, 6, 4, 2, 32;
INTEGER A7[42] =
65536, 32768, 16384, 8192, 2048, 512, 21760, 13056, 6912, 3328, 0, 16, 8, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 6, 5, 4, 0, 0, 0, 0, 0, 0, 0, 7;
INTEGER A8[42] =
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 512, 0, 0, 0, 512, 256, 128, 64, 32, 256, 128, 64, 32, 512, 384, 256, 128, 64, 32, 0, 560, 480, 400, 320, 256, 192, 160, 128, 96, 64, 32, 560;
INTEGER A9[21] =
12, 3, 131, 8, 3, 131, 0, 0, 0, 6, 3, 131, 0, 0, 0, 3, 1, 118, 1, 3, 126;
INTEGER A10[14] =
12, 3, 8, 3, 8, 3, 6, 3, 0, 0, 3, 1, 1, 1;
INTEGER A51[19] =
294, 0, 0, 0, 294, 148, 38, 20, 2, 148, 38, 20, 2, 294, 0, 148, 38, 20, 2;
INTEGER A49[14] =
12, 114, 8, 114, 8, 114, 6, 114, 0, 0, 3, 109, 1, 109;
INTEGER A11[5 * 3 * 41] =
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 22,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13360,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 256, 13360, 0, 0, 13360,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14128, 0, 0, 13360,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14128, 0, 0, 13360,
0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 1, 0, 98,
0, 0, 0, 0, 0, 0, 0, 0, 0, (39 << 16) + 0, 145, 137, (39 << 16) + 0, 233, 176,
0, 0, 0, 0, 0, 0, 0, 0, 0, (23 << 16) + 0, 145, 137, (23 << 16) + 0, 237, 176,
0, 0, 0, 0, 0, 0, 0, 0, 0, (15 << 16) + 0, 145, 137, (7 << 16) + 6, 113, 137,
0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0,1025, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0,1025, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0,1025, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0,1025, 0, 0,
0, 0, 0, 0, 0, 0,1025, 4, 0, 1, 1, 0,1025, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 99, 1, 0, 99,
0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 99, 1, 0, 99,
0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 99, 1, 0, 98,
0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 99, 1, 0, 98,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 98,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 99,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 99,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 98,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 98,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 98,
0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 97, 0, 1, 94,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 95,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 95,
0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 97, 0, 1, 94,
0, 0, 0, 1, 0, 98, 2, 1, 96, 1, 0, 97, 0, 2, 96,
0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 97, 0, 0, 96,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 98,
129, 10, 98, 1, 0, 98, 2, 1, 96, 1, 0, 97, 0, 0, 96,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 1, 1, 97, 1, 0, 97, 0, 2, 96, 0, 1, 96,
0, 0, 0, 0, 0, 0, 1, 31, 97, 4, 31, 98, 1, 0, 98;
INTEGER A14[64] =
8600,6400,4800,3600,2800,2000,1540,1140, 860, 640, 480, 360, 280, 200, 154, 116,
86, 64, 50, 36, 28, 24, 20, 16, 14, 12, 11, 9, 7, 5, 4, 3,
2000,1600,1300,1000, 900, 800, 720, 660, 600, 560, 520, 480, 440, 400, 380, 360,
340, 300, 280, 260, 240, 220, 200, 180, 160, 140, 120, 100, 80, 60, 40, 20;
INTEGER A15[16] =
60000,28000,10800,4200,1660, 660, 260, 100, 500, 200, 100, 60, 40, 30, 20, 10;
INTEGER A54[30] =
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 31, 16, 0, 0, 0, 32, 0, 32, 255, 65, 255, 82, 255, 69, 255, 84, 255, 76, 255, 65;
INTEGER A55[30] =
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 31, 16, 0, 32, 0, 32, 255, 65, 255, 82, 255, 69, 255, 84, 255, 76, 255, 65;
INTEGER A56[8] =
255, 1, 255, 56, 255, 57, 255, 65;
BOOLEAN V261  = 0;
BOOLEAN V262  = 0;
BOOLEAN V263  = 0;
BOOLEAN V264  = 0;
BOOLEAN V265[10000];
BOOLEAN V266[3];
BOOLEAN V278[13];
BOOLEAN V279[16];
INTEGER V267;
INTEGER V268;
INTEGER V269;
' VARIABLES
INTEGER A17[1];
INTEGER A48[1];
INTEGER A52[1];
INTEGER A113[1];
BOOLEAN A18[21];
BOOLEAN A32[60];
BOOLEAN A33[10];
BOOLEAN A39[10];
BOOLEAN A26[1600];
BOOLEAN A27[5];
BOOLEAN A28[273];
BOOLEAN A31[640];
BOOLEAN A57[640];
BOOLEAN A29[640];
BOOLEAN A45[640];
BOOLEAN A30[640];
BOOLEAN A34[50];
BOOLEAN A35[50];
BOOLEAN A36[50];
BOOLEAN A37[50];
BOOLEAN A38[70];
INTEGER V2 = 0;
BOOLEAN V216 = 0;
INTEGER V3 = 0;
INTEGER V4 = 0;
BOOLEAN b;
BOOLEAN ba[32];
INTEGER i;
INTEGER j;
INTEGER k;
INTEGER l;
INTEGER m;
INTEGER n;
INTEGER V271;
INTEGER V270;
INTEGER V10;
INTEGER V11;
INTEGER V12;
INTEGER V13;
BOOLEAN A19[20];
BOOLEAN A20[10];
INTEGER V14;
INTEGER V15;
INTEGER V89;
INTEGER V16;
INTEGER V87;
INTEGER V17;
INTEGER V181;
INTEGER V18;
INTEGER V19;
INTEGER V20;
INTEGER V21;
INTEGER V88;
INTEGER V94;
INTEGER V22;
INTEGER V179;
INTEGER V211;
INTEGER V223;
INTEGER V23;
INTEGER V24;
INTEGER V25;
INTEGER V26;
INTEGER V27;
INTEGER V28;
INTEGER V29 = 1;
INTEGER A16[15];
INTEGER V30;
INTEGER V31;
INTEGER V32 = 0;
INTEGER V33 = 0;
INTEGER V34 = 1;
INTEGER V35 = 0;
INTEGER V36 = 0;
INTEGER V37 = 0;
INTEGER V38 = 0;
INTEGER V72 = 0;
INTEGER V73 = 0;
BOOLEAN V39 = 0;
BOOLEAN V40 = 0;
INTEGER V41 = 0;
INTEGER V42 = 0;
BOOLEAN V43 = 0;
BOOLEAN V44 = 0;
BOOLEAN V45 = 0;
INTEGER V46;
INTEGER V47;
INTEGER V48;
BOOLEAN V49 = 0;
INTEGER V51 = -1;
INTEGER V52 = -1;
BOOLEAN V74 = 0;
BOOLEAN V75 = 0;
BOOLEAN V56 = 0;
BOOLEAN V57 = 0;
BOOLEAN V58 = 1;
BOOLEAN A40[10];
BOOLEAN A41[10];
BOOLEAN A44[10];
BOOLEAN V76 = 0;
BOOLEAN V80 = 1;
BOOLEAN V81 = 0;
BOOLEAN V82 = 0;
INTEGER V83 = 5;
INTEGER V84 = 0;
INTEGER V86 = 0;
BOOLEAN V91 = 0;
INTEGER V68 = 0;
INTEGER V69 = 0;
INTEGER V96 = 94;
BOOLEAN V97 = 1;
BOOLEAN V102 = 0;
BOOLEAN V100 = 0;
BOOLEAN V272 = 0;
BOOLEAN V103 = 0;
BOOLEAN V108 = 0;
BOOLEAN V104 = 0;
BOOLEAN V105 = 0;
BOOLEAN V107 = 0;
BOOLEAN V106 = 0;
BOOLEAN V101 = 0;
BOOLEAN V231 = 0;
BOOLEAN V259 = 0;
BOOLEAN V260 = 0;
BOOLEAN V280 = 0;
BOOLEAN V293 = 0;
BOOLEAN V308 = 1;
BOOLEAN USE_EXTEND_IR_DELAY_METHOD = 0;
BOOLEAN USE_FIXED_ALGORITHM = 0;
INTEGER V203 = 0;
BOOLEAN V228 = 0;
ENDDATA;
PROCEDURE L0 USES TEMP_DATA;
V102 = 1;
V103 = 1;
ENDPROC;
PROCEDURE DO_BLANK_CHECK USES TEMP_DATA;
V100 = 1;
ENDPROC;
PROCEDURE DO_VERIFY USES TEMP_DATA;
V108 = 1;
ENDPROC;
PROCEDURE DO_SECURE USES TEMP_DATA;
V107 = 1;
V106 = 1;
ENDPROC;
PROCEDURE DO_READ_UES USES TEMP_DATA;
V104 = 1;
ENDPROC;
PROCEDURE L17 USES TEMP_DATA;
V100 = 1;
ENDPROC;
PROCEDURE L18 USES TEMP_DATA;
V108 = 1;
ENDPROC;
PROCEDURE L23 USES TEMP_DATA;
V104 = 1;
ENDPROC;
PROCEDURE L24 USES TEMP_DATA;
V102 = 1;
ENDPROC;
PROCEDURE L27 USES DEVICE_DATA, TEMP_DATA, L39, L101,
L248,
L249, L191, L161, L219,
L435,
L124, L113, L93;
CALL L39;
IF(!(V101 || V103 || V108 || V107 ||
V100 || V102
) &&
V105) THEN GOTO L38;
V3 = 0;
V4 = 1;
CALL L101;
IF (V2 == 0) THEN GOTO L29;
IF (V42 == 0) THEN CALL L249;
IF ((V42 == 0) && V102) THEN CALL L191;
IF ((V42 == 0) && V100) THEN CALL L248;
IF ((V42 == 0) && V103) THEN CALL L161;
IF ((V42 == 0) && V108) THEN CALL L219;
IF ((V42 == 0) && V107) THEN CALL L435;
L29:
IF ((V42 == 0) && V104) THEN CALL L124;
L38:
CALL L93;
EXIT V42;
ENDPROC;
PROCEDURE L39 USES DEVICE_DATA, TEMP_DATA,
L106, L458, L108;
INTEGER V66 = 0;
INTEGER V90 = 0;
INTEGER V95 = 0;
INTEGER V67 = 0;
INTEGER V180 = 0;
INTEGER V212 = 0;
INTEGER V224 = 0;
INTEGER V199 = 0;
INTEGER V201 = 0;
INTEGER V202 = 0;
IF (V103) THEN V102 = 1;
IF (V106) THEN V107 = 1;
IF ((V102 || V100) && !V103 &&
(V108 || V107)) THEN V42 = 1;
IF (V42 != 0) THEN GOTO L84;
V21 = 0;
FOR i = 0 TO V1;
j = 1;
k = 1;
IF (((A13[i] & 1) == 0) ||
((A13[i] & 4) == 0)) THEN GOTO L40;
V2 = A12[i];
j = A1[V2];
k = A5[V2];
L40:
V21 = V21 + j;
V66 = V66 + k;
NEXT i;
l = 0;
FOR i = 4 TO 0 STEP -1;
FOR j = 0 TO V1;
IF (((A13[j] & 1) == 0) ||
((A13[j] & 4) == 0)) THEN GOTO L41;
V2 = A12[j];
FOR k = 0 TO (A1[V2] - 1);
IF ((k % 5) == i) THEN A26[l] = 1;
l = l + 1;
NEXT k;
GOTO L42;
L41:
l = l + 1;
L42:
NEXT j;
NEXT i;
V88 = 0;
FOR i = 0 TO V1;
j = 1;
k = 1;
IF (((A13[i] & 256) == 0) ||
((A13[i] & 4) == 0)) THEN GOTO L43;
V2 = A12[i];
j = A1[V2];
k = A5[V2];
IF ((V2 >= 23) && (V2 <= 27)) THEN
V96 = 95;
L43:
V88 = V88 + j;
V90 = V90 + k;
NEXT i;
V94 = 0;
FOR i = 0 TO V1;
j = 1;
k = 1;
IF (((A13[i] & 512) == 0) ||
((A13[i] & 4) == 0)) THEN GOTO L44;
V2 = A12[i];
j = A1[V2];
k = A5[V2];
L44:
V94 = V94 + j;
V95 = V95 + k;
NEXT i;
V179 = 0;
FOR i = 0 TO V1;
j = 1;
k = 1;
IF (((A13[i] & 2048) == 0) ||
((A13[i] & 4) == 0)) THEN GOTO L45;
V2 = A12[i];
j = A1[V2];
k = A5[V2];
L45:
V179 = V179 + j;
V180 = V180 + k;
NEXT i;
V211 = 0;
FOR i = 0 TO V1;
j = 1;
k = 1;
IF (((A13[i] & 16384) == 0) ||
((A13[i] & 4) == 0)) THEN GOTO L46;
V2 = A12[i];
j = A1[V2];
k = A5[V2];
L46:
V211 = V211 + j;
V212 = V212 + k;
NEXT i;
V223 = 0
;
V224 = 0
;
FOR i = 0 TO V1;
j = 1;
k = 1;
IF (((A13[i] & 32768) == 0) ||
((A13[i] & 4) == 0) ||
((A13[i] & 32) == 0)) THEN GOTO L47;
V2 = A105[i];
j = j + A1[V2];
k = k + A5[V2];
L47:
V223 = V223 + j;
V224 = V224 + k;
NEXT i;
V22 = 0;
FOR i = 0 TO V1;
j = 1;
k = 1;
IF (((A13[i] & 2) == 0) ||
((A13[i] & 4) == 0)) THEN GOTO L48;
V2 = A12[i];
j = A1[V2];
k = A5[V2];
L48:
V22 = V22 + j;
V67 = V67 + k;
NEXT i;
l = 0;
FOR i = 4 TO 0 STEP -1;
FOR j = 0 TO V1;
IF (((A13[j] & 2) == 0) ||
((A13[j] & 4) == 0)) THEN GOTO L49;
V2 = A12[j];
FOR k = 0 TO (A1[V2] - 1);
IF ((k % 5) == i) THEN A27[l] = 1;
l = l + 1;
NEXT k;
GOTO L50;
L49:
l = l + 1;
L50:
NEXT j;
NEXT i;
V16 = 0;
FOR i = 0 TO V1;
j = 1;
IF (((A13[i] & 1) == 0) ||
((A13[i] & 4) == 0)) THEN GOTO L51;
V2 = A12[i];
j = A0[V2];
L51:
V16 = V16 + j;
NEXT i;
V87 = 0;
FOR i = 0 TO V1;
j = 1;
IF (((A13[i] & 256) == 0) ||
((A13[i] & 4) == 0)) THEN GOTO L52;
V2 = A12[i];
j = A0[V2];
L52:
V87 = V87 + j;
NEXT i;
V17 = 0;
FOR i = 0 TO V1;
j = 1;
IF (((A13[i] & 2) == 0) ||
((A13[i] & 4) == 0)) THEN GOTO L53;
V2 = A12[i];
j = A0[V2];
L53:
V17 = V17 + j;
NEXT i;
V181 = 0;
FOR i = 0 TO V1;
j = 1;
IF (((A13[i] & 2048) == 0) ||
((A13[i] & 4) == 0)) THEN GOTO L54;
V2 = A12[i];
j = A0[V2];
L54:
V181 = V181 + j;
NEXT i;
V18 = V17;
IF (V16 > V18) THEN V18 = V16;
IF (V87 > V18) THEN V18 = V87;
IF (V181 > V18) THEN V18 = V181;
V20 = 32 + V1;
IF ((2 * 5 * 5 * V67) > V20) THEN V20 = 2 * 5 * 5 * V67;
IF ((2 * 5 * V66) > V20) THEN V20 = 2 * 5 * V66;
IF (V90 > V20) THEN V20 = V90;
IF (V95 > V20) THEN V20 = V95;
IF (V180 > V20) THEN V20 = V180;
IF (V212 > V20) THEN V20 = V212;
IF (V224 > V20) THEN V20 = V224;
V19 = V18;
IF (V21 > V19) THEN V19 = V21;
IF (V88 > V19) THEN V19 = V88;
IF (V94 > V19) THEN V19 = V94;
IF (V179 > V19) THEN V19 = V179;
IF (V211 > V19) THEN V19 = V211;
IF (V223 > V19) THEN V19 = V223;
IF (V20 > V19) THEN V19 = V20;
FOR i = 0 TO (V19 - 1);
A29[i] = 0;
A30[i] = 1;
NEXT i;
V33 = 0;
FOR i = 0 TO V1;
IF (((A13[i] & 2) == 0) ||
((A13[i] & 4) == 0)) THEN GOTO L55;
V2 = A12[i];
IF (V33 < A7[V2]) THEN
V33 = A7[V2];
L55:
NEXT i;
V12 = 0;
V13 = 0;
FOR i = 0 TO V1;
V12 = V12 + A25[i];
IF (A25[i] > V13) THEN V13 = A25[i];
NEXT i;
FOR i = 0 TO (V13 - 1);
A39[i] = 1;
NEXT i;
FOR i = 0 TO 4;
j = 10 * i;
A34[(j + 9)..j] = $016;
A35[(j + 9)..j] = $01A;
A36[(j + 9)..j] = $022;
A37[(j + 9)..j] = $026;
FOR k = 0 TO 2;
b = 0;
IF ((i & (1 << k)) != 0) THEN b = 1;
A34[j + k + 7] = b;
A35[j + k + 7] = b;
A36[j + k + 7] = b;
A37[j + k + 7] = b;
NEXT k;
NEXT i;
FOR i = 0 TO 6;
j = 10 * i;
A38[(j + 9)..j] = $02A;
FOR k = 0 TO 2;
b = 0;
IF ((i & (1 << k)) != 0) THEN b = 1;
A38[j + k + 7] = b;
NEXT k;
NEXT i;
FOR i = 0 TO V1;
A52[i] = 0;
IF (((A13[i] & 256) == 0) ||
((A13[i] & 4) == 0)) THEN GOTO L56;
V2 = A12[i];
A52[i] =
A5[V2] - (80 * A6[V2]);
L56:
NEXT i;
CALL L106;
IRSTOP IRPAUSE;
DRSTOP IDLE;
STATE IDLE;
IF(!(V101 || V103 || V108 || V107 ||
V100 || V102
) &&
V105) THEN GOTO L84;
V4 = 0;
FOR i = 0 TO V1;
IF (((A17[i] & (32)) != 0) &&
((A17[i] & 4) != 0) &&
((A17[i] & 64) != 0)) THEN
V4 = 32;
NEXT i;
IF (V4 != 32) THEN
GOTO L57;
FOR i = 0 TO V1;
IF (((A17[i] & (32)) != 0) &&
((A17[i] & 4) != 0) &&
((A17[i] & 64) == 0)) THEN
A17[i] = A17[i] | 8;
NEXT i;
A18[9..0] = $281;
CALL L458;
FOR i = 0 TO 20;
WAIT IDLE, 512 CYCLES, 512 USEC, IDLE;
NEXT i;
FOR i = 0 TO V1;
IF (((A17[i] & (32)) != 0) &&
((A17[i] & 4) != 0) &&
((A17[i] & 64) == 0)) THEN
A17[i] = A17[i] & ~8;
NEXT i;
L57:
IF (V101 || V231 || V259) THEN CALL L108;
IF (V42 != 0) THEN GOTO L84;
FOR i = 0 TO V1;
IF (((A17[i] & (1 | 2)) != 0) &&
((A17[i] & 4) != 0) &&
((A17[i] & 8) == 0)) THEN
V4 = 1 | 2;
NEXT i;
IF (V4 != (1 | 2)) THEN
GOTO L58;
A18[9..0] = $071;
CALL L458;
WAIT 10000 USEC;
L58:
FOR i = 0 TO V1;
IF (((A17[i] & 256) != 0) &&
((A17[i] & 4) != 0) &&
((A17[i] & 8) == 0)) THEN
V4 = 256;
NEXT i;
IF (V4 != 256) THEN
GOTO L70;
A18[9..0] = $332;
CALL L458;
WAIT 10000 USEC;
V203 = 0;
L70:
FOR i = 0 TO V1;
IF (((A17[i] & 512) != 0) &&
((A17[i] & 4) != 0) &&
((A17[i] & 8) == 0)) THEN
V4 = 512;
NEXT i;
IF (V4 != 512) THEN
GOTO L71;
A18[9..0] = $044;
CALL L458;
WAIT 10000 USEC;
L71:
FOR i = 0 TO V1;
IF (((A17[i] & 2048) != 0) &&
((A17[i] & 4) != 0) &&
((A17[i] & 8) == 0)) THEN
V4 = 2048;
NEXT i;
IF (V4 != 2048) THEN
GOTO L72;
IF (V103 || V102) THEN V38 = 1;
V38 = 0;
WAIT 10000 USEC;
L72:
FOR i = 0 TO V1;
IF (((A17[i] & 16384) != 0) &&
((A17[i] & 4) != 0) &&
((A17[i] & 8) == 0)) THEN
V4 = 16384;
NEXT i;
IF (V4 != 16384) THEN
GOTO L84;
V203 = 0;
L84:
ENDPROC;
PROCEDURE L93 USES DEVICE_DATA, TEMP_DATA, L107, L458, L108, L113
;
IF (V42 == 1) THEN GOTO L100;
CALL L107;
L94:
FOR i = 0 TO V1;
IF (((A17[i] & (1 | 2)) != 0) &&
((A17[i] & 4) != 0) &&
((A17[i] & 8) == 0)) THEN
V4 = 1 | 2;
NEXT i;
IF (V4 != (1 | 2)) THEN
GOTO L95;
A18[9..0] = $079;
CALL L458;
WAIT 10000 USEC;
L95:
FOR i = 0 TO V1;
IF (((A17[i] & 256) != 0) &&
((A17[i] & 4) != 0) &&
((A17[i] & 8) == 0)) THEN
V4 = 256;
NEXT i;
IF (V4 != 256) THEN
GOTO L96;
A18[9..0] = $006;
CALL L458;
L96:
FOR i = 0 TO V1;
IF (((A17[i] & (512 | 2048)) != 0) &&
((A17[i] & 4) != 0) &&
((A17[i] & 8) == 0)) THEN
V4 = 512 | 2048;
NEXT i;
IF (V4 != (512 | 2048)) THEN
GOTO L97;
A18[9..0] = $04A;
CALL L458;
WAIT 10000 USEC;
L97:
FOR i = 0 TO V1;
IF (((A17[i] & 16384) != 0) &&
((A17[i] & 4) != 0) &&
((A17[i] & 8) == 0)) THEN
V4 = 16384;
NEXT i;
IF (V4 != 16384) THEN
GOTO L98;
A18[9..0] = $201;
IF (V228 == 1) THEN A18[9..0] = $166;
CALL L458;
WAIT 10000 USEC;
L98:
IF ((!V76 && !V231 && !V259) || (V42 != 0)) THEN GOTO L99;
WAIT IDLE, 256 CYCLES, 10 USEC, IDLE;
V80 = 0;
CALL L108;
IF ((V42 != 0) && V76) THEN V42 = 10;
IF ((V42 != 0) && !V76) THEN V42 = 10;
IF (V42 != 0) THEN GOTO L100;
L99:
A18[9..0] = $3FF;
CALL L458;
IF (V105 && (V42 == 0)) THEN CALL L113;
L100:
IF (V42 == 0) THEN
PRINT "DONE";
IF (V42 == 1) THEN
PRINT "Invalid option combination specified";
IF (V42 == 6) THEN
PRINT "Unrecognized device";
IF (V42 == 7) THEN
PRINT "Device revision is not supported";
IF ((V42 == 10) && (V103)) THEN
PRINT "Device programming failure";
IF (V42 == 9) THEN
PRINT "Device is not blank";
IF (V42 == 11) THEN
PRINT "Device verify failure";
IF ((V42 == 10) && (V101)) THEN
PRINT "Device configuration failure";
IF (V42 == 4) THEN
PRINT "Unable to read USERCODE/UES from device #", V84 + 1;
IF (V42 == 12) THEN
PRINT "Failed to configure Excalibur stripe";
IF (V42 == 14) THEN
PRINT "Failed to erase or program ASC device";
ENDPROC;
PROCEDURE L101 USES DEVICE_DATA, TEMP_DATA;
j = 0;
FOR i = 0 TO V1;
IF ((j <= V3) &&
((A13[i] & V4) != 0) &&
((A13[i] & 4) != 0)) THEN j = i + 1;
NEXT i;
IF (j > V3) THEN GOTO L102;
V2 = 0;
V3 = 0;
GOTO L105;
L102:
V2 = A12[j - 1];
V3 = j;
IF(!V216) THEN GOTO L103;
V2 = A105[j - 1];
L103:
IF ((V4 == 32) || (V4 == 256) ||
(V4 == 512) || (V4 == 2048) ||
(V4 == 16384) || (V4 == 32768) ||
(V4 == 1024))
THEN GOTO L105;
IF (V58) THEN GOTO L104;
A41[9..0] = $066;
GOTO L105;
L104:
A41[9..0] = $006;
L105:
IF (V4 == 1) THEN A40[9..0] = $00E;
IF (V4 == 1) THEN A44[9..0] = $012;
IF (V4 == 2) THEN A40[9..0] = $38E;
IF (V4 == 2) THEN A44[9..0] = $392;
ENDPROC;
PROCEDURE L106 USES DEVICE_DATA, TEMP_DATA, L107
, L454
;
CALL L107;
IF (V32 == 0) THEN CALL L454;
V10 = 0;
V14 = 0;
V15 = 0;
V89 = 0;
V49 = 1;
V34 = 0;
V51 = -1;
V52 = -1;
V45 = 0;
V29 = 1;
IF (V103) THEN V29 = 0;
IF (V102 && V74) THEN V29 = 2;
ENDPROC;
PROCEDURE L107 USES DEVICE_DATA, TEMP_DATA;
FOR i = 0 TO V1;
A17[i] = (A13[i] | A48[i]);
IF (((A17[i] & 4) != 0) &&
((A17[i] & (1 | 256 | 2 | 512 | 2048 | 16384)) != 0) &&
!V102 && !V100 && !V103 && !V108 &&
!V107 && !V106 && V101) THEN
A17[i] = A17[i] & ~4;
IF (((A17[i] & 4) != 0) &&
((A17[i] & 32) != 0) && ((A17[i] & 32768) == 0) && ((A17[i] & 1024) == 0) && !V101 &&
(V102 || V100 || V103 || V108 ||
V107 || V106)) THEN
A17[i] = A17[i] & ~4;
NEXT i;
ENDPROC;
PROCEDURE L108 USES DEVICE_DATA, TEMP_DATA, L107;
INTEGER V79 = 32 * V0;
BOOLEAN A46[V79];
INTEGER A47[8];
INTEGER V145;
CALL L107;
STATE IDLE;
V27 = 0;
FOR i = 0 TO V1;
A18[(A25[i] - 1)..0] = A39[(A25[i] - 1)..0];
IF ((A17[i] & (1 | 2 | 256 | 512 | 2048)) != 0) THEN
A18[9..0] = $059;
IF ((A17[i] & (32 | 16384)) != 0) THEN
A18[9..0] = $006;
A32[(V27 + (A25[i] - 1))..V27] = A18[(A25[i] - 1)..0];
V27 = V27 + A25[i];
NEXT i;
IRSCAN V27, A32[(V27 - 1)..0];
WAIT IRPAUSE, 5 USEC, IDLE;
WAIT 3 CYCLES;
DRSCAN V79, A46[(V79 - 1)..0], CAPTURE A46[(V79 - 1)..0];
V27 = 0;
FOR i = 0 TO V1;
IF (A46[V27] == 1) THEN GOTO L109;
IF (V80) THEN
PRINT "Device #", V0 - i, " unable to read IDCODE";
IF (V101 && ((A17[i] & 32) != 0) &&
((A17[i] & 4) != 0)) THEN V42 = 6;
GOTO L110;
L109:
FOR j = 0 TO 7;
A47[j] = 0;
FOR k = 0 TO 3;
IF (A46[V27 + (4 * j) + k]) THEN
A47[j] = A47[j] | (1 << k);
NEXT k;
A47[j] = A47[j] + 48;
IF (A47[j] >= 58) THEN A47[j] = A47[j] + 7;
NEXT j;
IF (V80) THEN
PRINT "Device #", V0 - i, " IDCODE is ",
CHR$(A47[7]), CHR$(A47[6]),
CHR$(A47[5]), CHR$(A47[4]),
CHR$(A47[3]), CHR$(A47[2]),
CHR$(A47[1]), CHR$(A47[0]);
IF (V101 && ((A17[i] & 32) != 0) &&
((A17[i] & 4) != 0) && (A47[0] != 68) &&
(A47[1] != 68)) THEN
V42 = 6;
V27 = V27 + 31;
L110:
V27 = V27 + 1;
NEXT i;
V27 = 0;
FOR i = 0 TO V1;
IF(A61[i] != 0) THEN GOTO L111;
IF(A46[V27] != 0) THEN
V42 = 6;
V27 = V27 + 1;
NEXT i;
GOTO L112;
L111:
V145 = 0;
FOR j = 0 TO 31;
IF(A46[(V27 + j)]) THEN
V145 = V145 + (1 << j);
NEXT j;
V27 = V27 + 32;
IF(A61[i] != V145) THEN
V42 = 6;
NEXT i;
L112:
ENDPROC;
PROCEDURE L113 USES DEVICE_DATA, TEMP_DATA, L107, L458, L119;
j = 0;
k = V1;
V84 = V84 - 1;
IF (V84 == -1) THEN GOTO L114;
IF ((V84 < 0) || (V84 > V1) ||
(((A17[V1 - V84] & 256) == 0) &&
((A17[V1 - V84] & 32) == 0) &&
((A17[V1 - V84] & 512) == 0) &&
((A17[V1 - V84] & 16384) == 0) &&
((A17[V1 - V84] & 2048) == 0))) THEN
V42 = 4;
IF (V42 != 0) THEN GOTO L118;
j = V84;
k = V84;
L114:
CALL L107;
FOR i = 0 TO V1;
IF (((A17[i] & 256) != 0) &&
((A17[i] & 4) != 0) &&
((A17[i] & 8) == 0)) THEN
V4 = 256;
NEXT i;
IF (V4 != 256) THEN
GOTO L115;
A18[9..0] = $006;
CALL L458;
WAIT 10000 USEC;
L115:
FOR i = 0 TO V1;
IF (((A17[i] & (512 | 2048)) != 0) &&
((A17[i] & 4) != 0) &&
((A17[i] & 8) == 0)) THEN
V4 = 512 | 2048;
NEXT i;
IF (V4 != (512 | 2048)) THEN
GOTO L116;
A18[9..0] = $04A;
CALL L458;
WAIT 10000 USEC;
L116:
FOR i = 0 TO V1;
IF (((A17[i] & 16384) != 0) &&
((A17[i] & 4) != 0) &&
((A17[i] & 8) == 0)) THEN
V4 = 16384;
NEXT i;
IF (V4 != 16384) THEN
GOTO L117;
A18[9..0] = $201;
CALL L458;
WAIT 10000 USEC;
L117:
A18[9..0] = $3FF;
CALL L458;
STATE IDLE;
FOR i = 0 TO (V19 - 1);
A30[i] = 1;
NEXT i;
FOR i = j TO k;
V84 = i;
PUSH i; PUSH j; PUSH k;
CALL L107;
V4 = 0;
IF (((A17[V1 - V84] & 256) != 0) &&
((A17[V1 - V84] & 4) != 0)) THEN
V4 = 256;
IF (((A17[V1 - V84] & 16384) != 0) &&
((A17[V1 - V84] & 4) != 0)) THEN
V4 = 16384;
IF (((A17[V1 - V84] & 32) != 0) &&
((A17[V1 - V84] & 4) != 0)) THEN
V4 = 32;
IF (((A17[V1 - V84] & 512) != 0) &&
((A17[V1 - V84] & 4) != 0)) THEN
V4 = 512;
IF (((A17[V1 - V84] & 2048) != 0) &&
((A17[V1 - V84] & 4) != 0)) THEN
V4 = 2048;
IF (V4 != 0) THEN CALL L119;
POP k; POP j; POP i;
NEXT i;
L118:
V84 = 0;
ENDPROC;
PROCEDURE L119 USES DEVICE_DATA, TEMP_DATA, L458, L123;
j = V1 - V84;
FOR i = 0 TO V1;
IF (((A17[i] & V4) != 0) &&
((A17[i] & 4) != 0) && (i != j)) THEN
A17[i] = A17[i] | 8;
NEXT i;
IF (V4 == 256) THEN
A18[9..0] = $007;
IF (V4 == 16384) THEN
A18[9..0] = $007;
IF ((V4 == 512) || (V4 == 2048)) THEN
A18[9..0] = $079;
IF (V4 == 32) THEN
A18[9..0] = $007;
CALL L458;
DRSCAN 32 + j, A30[(32 + j - 1)..0], CAPTURE A31[(32 + j - 1)..0];
V86 = 0;
FOR i = 0 TO 31;
IF (A31[i + j]) THEN
V86 = V86 | (1 << i);
NEXT i;
CALL L123;
ENDPROC;
PROCEDURE L120 USES DEVICE_DATA, TEMP_DATA, L107, L458;
CALL L107;
V4 = 512 | 2048;
j = 0;
FOR i = 0 TO V1;
A30[j] = 1;
l = 1;
IF (((A17[i] & (512 | 2048)) == 0) ||
((A17[i] & 4) == 0)) THEN
GOTO L122;
l = 8 * 3;
IF ((A17[i] & 512) != 0) THEN
GOTO L121;
l = 58 * 3;
L121:
FOR V27 = 0 TO l - 1;
A30[j + V27] = 1;
IF ((V27 % 3) == 0) THEN
A30[j + V27] = 0;
NEXT V27;
L122:
j = j + l;
NEXT i;
A18[9..0] = $055;
CALL L458;
WAIT IDLE, 10 CYCLES, 1000 USEC, IDLE;
DRSCAN j, A30[j - 1..0];
WAIT IDLE, 10 CYCLES, 1000 USEC, IDLE;
A18[9..0] = $000;
CALL L458;
WAIT IDLE, 10 CYCLES, 1000 USEC, IDLE;
A18[9..0] = $3FF;
CALL L458;
WAIT IDLE, 10 CYCLES, 1000 USEC, IDLE;
FOR i = 0 TO j - 1;
A30[i] = 1;
NEXT i;
ENDPROC;
PROCEDURE L123 USES DEVICE_DATA, TEMP_DATA;
INTEGER A58[8];
EXPORT "DEVICE", V84 + 1;
EXPORT "USERCODE", V86;
FOR i = 0 TO 7;
V27 = 0;
A58[i] = V86 & 15;
IF (A58[i] > 9) THEN V27 = 7;
A58[i] = A58[i] + 48 + V27;
V86 = V86 >> 4;
NEXT i;
PRINT "Device #", V84 + 1, " USERCODE code is ",
CHR$(A58[7]), CHR$(A58[6]),
CHR$(A58[5]), CHR$(A58[4]),
CHR$(A58[3]), CHR$(A58[2]),
CHR$(A58[1]), CHR$(A58[0]);
ENDPROC;
PROCEDURE L124 USES DEVICE_DATA, TEMP_DATA, L107
, L129
;
j = 0;
k = V1;
V34 = 1;
V29 = 1;
V84 = V84 - 1;
IF (V84 == -1) THEN GOTO L126;
IF ((V84 < 0) || (V84 > V1) ||
(((A17[V1 - V84] & 1) == 0) &&
((A17[V1 - V84] & 2) == 0))) THEN
V42 = 4;
IF (V42 != 0) THEN GOTO L127;
L125:
j = V84;
k = V84;
L126:
FOR i = j TO k;
V84 = i;
PUSH i; PUSH j; PUSH k;
CALL L107;
V86 = 0;
IF (((A17[V1 - V84] & 1) != 0) &&
((A17[V1 - V84] & 4) != 0)) THEN
CALL L129;
POP k; POP j; POP i;
NEXT i;
L127:
V84 = 0;
ENDPROC;
PROCEDURE L129 USES DEVICE_DATA, TEMP_DATA, L458, L682, L385, L317, L134;
V4 = 1;
A18[9..0] = $016;
CALL L458;
DRSCAN V21, A26[(V21 - 1)..0];
A18[9..0] = $01A;
CALL L458;
DRSCAN V21, A26[(V21 - 1)..0];
j = V1 - V84;
FOR i = 0 TO V1;
IF (((A17[i] & 1) != 0) && ((A17[i] & 4) != 0) &&
(i != j)) THEN A17[i] = A17[i] | 8;
NEXT i;
CALL L682;
V2 = A12[j];
V27 = (V2 - 1) * 2;
i = A49[V27];
V48 = A49[V27 + 1];
V46 = A6[V2];
IF (V48 < (V46 >> 1)) THEN GOTO L130;
V48 = V46 - V48 - 1;
L130:
V27 = j + V24 + (16 * V48) + 12;
FOR V11 = i TO i + 15;
PUSH i;
PUSH V27;
CALL L385;
CALL L317;
POP V27;
POP i;
IF (A31[V27]) THEN
V86 = V86 | (1 << (V11 - i));
NEXT V11;
CALL L134;
ENDPROC;
PROCEDURE L134 USES DEVICE_DATA, TEMP_DATA;
INTEGER V85[8];
EXPORT "DEVICE", V84 + 1;
EXPORT "UES", V86;
FOR i = 0 TO 3;
V27 = 0;
V85[i] = V86 & 15;
IF (V85[i] > 9) THEN V27 = 7;
V85[i] = V85[i] + 48 + V27;
V86 = V86 >> 4;
NEXT i;
PRINT "Device #", V84 + 1, " UES code is ",
CHR$(V85[3]), CHR$(V85[2]),
CHR$(V85[1]), CHR$(V85[0]);
ENDPROC;
PROCEDURE L161 USES DEVICE_DATA, TEMP_DATA, L106, L712, L385, L418;
PRINT "programming 7K device(s)...";
CALL L106;
CALL L712;
FOR V11 = 1 TO 107;
CALL L385;
CALL L418;
NEXT V11;
V49 = 1;
FOR V11 = 109 TO (V32 - 1);
CALL L385;
CALL L418;
NEXT V11;
ENDPROC;
PROCEDURE L185 USES DEVICE_DATA, TEMP_DATA, L458;
A18[9..0] = A41[9..0];
CALL L458;
A18[9..0] = A40[9..0];
CALL L458;
A18[9..0] = $00A;
CALL L458;
IF (V58) THEN V56 = 1;
WAIT (V38 * 1000) USEC;
IF (V58) THEN GOTO L186;
IF (V82) THEN V83 = 20000;
A18[9..0] = $06A;
CALL L458;
V83 = 5;
A18[9..0] = $06E;
CALL L458;
L186:
A18[9..0] = A44[9..0];
CALL L458;
ENDPROC;
PROCEDURE L187 USES DEVICE_DATA, TEMP_DATA, L458;
A18[9..0] = A41[9..0];
CALL L458;
A18[9..0] = $00A;
CALL L458;
IF (V58) THEN V56 = 1;
WAIT (V37 * 100) USEC;
IF (V58) THEN GOTO L188;
A18[9..0] = $06E;
CALL L458;
L188:
A18[9..0] = A44[9..0];
CALL L458;
ENDPROC;
PROCEDURE L189 USES DEVICE_DATA, TEMP_DATA, L107;
CALL L107;
FOR i = 0 TO V1;
IF (((A17[i] & 1) == 0) || ((A17[i] & 4) == 0))
THEN GOTO L190;
IF (V82 && ((A48[i] & 128) == 0))
THEN A17[i] = A17[i] | 8;
IF (!V82 && ((A48[i] & 128) != 0))
THEN A17[i] = A17[i] | 8;
L190:
NEXT i;
IF (V82) THEN A41[9..0] = $066;
IF (!V82 && V58) THEN A41[9..0] = $006;
ENDPROC;
PROCEDURE L191 USES DEVICE_DATA, TEMP_DATA, L458, L189, L185, L385, L418;
A18[9..0] = $012;
CALL L458;
A18[9..0] = $01E;
CALL L458;
DRSCAN V16, A30[(V16 - 1)..0];
L192:
CALL L189;
b = V58;
IF (V82) THEN V58 = 0;
CALL L185;
V58 = b;
IF (!V82) THEN GOTO L193;
V82 = 0;
GOTO L192;
L193:
A18[9..0] = $01E;
CALL L458;
DRSCAN V16, A29[(V16 - 1)..0];
IF (V103) THEN GOTO L194;
V75 = 1;
FOR V11 = 102 TO 103;
CALL L385;
CALL L418;
NEXT V11;
V75 = 0;
L194:
ENDPROC;
PROCEDURE L219 USES DEVICE_DATA, TEMP_DATA, L106, L712, L694, L385, L317;
IF (V74) THEN PRINT "blank checking 7K device(s)...";
IF (!V74) THEN PRINT "verifying 7K device(s)...";
CALL L106;
CALL L712;
CALL L694;
FOR V11 = 1 TO 101;
CALL L385;
CALL L317;
IF (V42 != 0) THEN V11 = 101;
NEXT V11;
IF (V42 != 0) THEN GOTO L221;
IF (V74 && !V103) THEN GOTO L220;
FOR V11 = 102 TO 103;
CALL L385;
CALL L317;
IF (V42 != 0) THEN V11 = 103;
NEXT V11;
L220:
IF (V42 != 0) THEN GOTO L221;
FOR V11 = 104 TO 107;
CALL L385;
CALL L317;
IF (V42 != 0) THEN V11 = 107;
NEXT V11;
IF (V42 != 0) THEN GOTO L221;
V45 = 1;
FOR V11 = 109 TO 113;
CALL L385;
CALL L317;
IF (V42 != 0) THEN V11 = 113;
NEXT V11;
IF (V42 != 0) THEN GOTO L221;
V45 = 0;
FOR V11 = 114 TO (V32 - 1);
CALL L385;
CALL L317;
IF (V42 != 0) THEN V11 = V32 - 1;
NEXT V11;
L221:
ENDPROC;
PROCEDURE L248 USES DEVICE_DATA, TEMP_DATA
, L219
;
V74 = 1;
IF (V4 == 1) THEN CALL L219;
IF (V103) THEN V74 = 0;
ENDPROC;
PROCEDURE L249 USES DEVICE_DATA, TEMP_DATA, L106, L385, L317, L682, L107;
CALL L106;
V37 = 100;
V38 = 100;
V29 = 1;
V11 = 0;
CALL L385;
V34 = 1;
IF (USE_FIXED_ALGORITHM) THEN GOTO L250;
CALL L317;
GOTO L251;
L250:
CALL L682;
FOR i = 0 TO V20 - 1;
A31[i] = 0;
A57[i] = 0;
NEXT i;
L251:
FOR i = V1 TO 0 STEP -1;
A48[i] = 0;
IF (((A17[i] & 1) == 0) ||
((A17[i] & 4) == 0)) THEN GOTO L261;
V68 = 0;
FOR j = 0 TO i;
V26 = 0;
V2 = A12[j];
IF (i == j) THEN GOTO L252;
V26 = 1;
IF (((A17[j] & 1) == 0) ||
((A17[j] & 4) == 0)) THEN GOTO L252;
V26 = A8[V2] >> 1;
L252:
V68 = V68 + V26;
NEXT j;
FOR j = 0 TO 14;
A16[j] = 0;
V46 = A6[V2];
V47 = j / (V46 << 1);
V48 = (j % (V46 << 1)) >> 1;
V69 = 0;
IF (V48 < (V46 >> 1)) THEN GOTO L253;
V69 = 1;
V48 = V46 - V48 - 1;
L253:
V27 = V68 + (((2 * V47) + V69) * V24) +
(16 * V48) + (8 * (~j & 1));
FOR k = 0 TO 7;
IF (USE_FIXED_ALGORITHM) THEN GOTO L254;
IF (A31[V27 + k]) THEN
A16[j] = A16[j] | (1 << k);
GOTO L255;
L254:
IF ((A54[j << 1] & (1 << k)) != 0) THEN
A31[V27 + k] = 1;
IF ((A54[(j << 1) + 1] & (1 << k)) != 0) THEN
A57[V27 + k] = 1;
L255:
NEXT k;
IF (USE_FIXED_ALGORITHM) THEN
A16[j] = A54[j << 1];
NEXT j;
IF (!USE_FIXED_ALGORITHM) THEN GOTO L256;
PUSH i;
CALL L317;
POP i;
IF (V39) THEN V42 = 6;
L256:
IF ((A16[0] != 65) ||
(A16[1] != 76) ||
(A16[2] != 84) ||
(A16[3] != 69) ||
(A16[4] != 82) ||
(A16[5] != 65))
THEN V42 = 6;
IF (V42 != 0) THEN GOTO L261;
V35 = ((A16[6] - 48) * 10) + (A16[7] - 48);
V36 = A16[9] & 31;
V27 = 5 * 3 * (V2 - 1);
V40 = 0;
V72 = 300;
V73 = 100;
IF ((V36 & 24) == 16) THEN
V40 = 1;
FOR j = 0 TO (5 - 1);
IF (V40 ||
(V35 != A11[V27]) ||
(V36 != A11[V27 + 1])) THEN
GOTO L260;
V40 = 1;
IF ((A11[V27 + 2] & 1) != 1) THEN
GOTO L257;
V72 = A14[A16[8] & 31];
V73 = A15[(A16[8] >> 5) & 7];
L257:
IF ((A11[V27 + 2] & 2) != 2) THEN
GOTO L258;
k = 14;
IF (V2 == 2) THEN k = 11;
V72 = A14[((A16[k] >> 3) & 31) + 32];
V73 = A15[(A16[k] & 7) + 8];
L258:
IF ((A11[V27 + 2] & 4) != 4) THEN
GOTO L259;
V72 = 500;
V73 = 500;
L259:
IF ((A11[V27 + 2] & 128) != 128) THEN
GOTO L260;
V82 = 1;
A48[i] = A48[i] | 128;
L260:
V27 = V27 + 3;
NEXT j;
V27 = 0;
IF ((V36 & 15) > 9) THEN V27 = 7;
PRINT "Device #", V0 - i ," Silicon ID is ",
CHR$(A16[0]), CHR$(A16[1]), CHR$(A16[2]), CHR$(A16[3]),
CHR$(A16[4]), CHR$(A16[5]), CHR$(A16[6]), CHR$(A16[7]),
"(", CHR$(((V36 >> 4) & 1) + 48),
CHR$((V36 & 15) + 48 + V27), ")"
;
IF (V72 > V37) THEN V37 = V72;
IF (V73 > V38) THEN V38 = V73;
IF (!V40) THEN V42 = 7;
L261:
NEXT i;
IF ((V42 == 0) && V82) THEN CALL L107;
ENDPROC;
PROCEDURE L313 USES DEVICE_DATA, TEMP_DATA, L458;
A18[9..0] = A19[9..0];
CALL L458;
WAIT 15 USEC;
A18[9..0] = A20[9..0];
CALL L458;
IF (V34 == 0) THEN GOTO L314;
IF (!USE_FIXED_ALGORITHM) THEN
DRSCAN V24, A29[(V24 - 1)..0], CAPTURE A31[V31..V30];
IF (USE_FIXED_ALGORITHM) THEN
DRSCAN V24, A29[(V24 - 1)..0], COMPARE A31[V31..V30],
A57[V31..V30], V40;
GOTO L316;
L314:
IF (V74) THEN GOTO L315;
DRSCAN V24, A29[(V24 - 1)..0], COMPARE A22[V31..V30],
A30[(V24 - 1)..0], V40;
GOTO L316;
L315:
DRSCAN V24, A29[(V24 - 1)..0],
COMPARE A30[(V24 - 1)..0], A30[(V24 - 1)..0],
V40;
L316:
IF (!V40) THEN V39 = 1;
ENDPROC;
PROCEDURE L317 USES DEVICE_DATA, TEMP_DATA, L458, L682, L313, L696, L692, L694;
V39 = 0;
V40 = 1;
IF (V10 > 89) THEN GOTO L318;
A18[9..0] = $016;
CALL L458;
DRSCAN V21, A26[(V21 - 1)..0];
A18[9..0] = $01A;
CALL L458;
DRSCAN V21, A26[(V21 - 1)..0];
L318:
IF (V29 == 0) THEN
A19[9..0] = $036;
IF (V29 == 1) THEN
A19[9..0] = $03A;
IF (V29 == 2) THEN
A19[9..0] = $032;
IF (V49) THEN CALL L682;
IF (V34 == 1) THEN GOTO L319;
V30 = V15;
V31 = V30 + (V24 - 1);
GOTO L320;
L319:
V30 = 0;
V31 = V24 - 1;
L320:
V81 = 0;
V28 = 4;
IF (V10 > 88) THEN V28 = 0;
FOR i = 0 TO V28;
IF (i == V28) THEN V81 = 1;
PUSH i;
A20[9..0] = $022;
CALL L313;
IF (V29 != 0) THEN GOTO L321;
A19[9..0] = $032;
CALL L313;
A19[9..0] = $036;
L321:
V30 = V30 + V24;
V31 = V31 + V24;
IF (!V45) THEN GOTO L322;
b = 0;
CALL L696;
GOTO L323;
L322:
IF (V10 != V51) THEN GOTO L323;
V44 = 1;
b = 0;
CALL L692;
L323:
A20[9..0] = $026;
CALL L313;
IF (V29 != 0) THEN GOTO L324;
A19[9..0] = $032;
CALL L313;
A19[9..0] = $036;
L324:
V30 = V30 + V24;
V31 = V31 + V24;
IF (!V45) THEN GOTO L325;
b = 1;
CALL L696;
GOTO L326;
L325:
IF (V10 != V51) THEN GOTO L326;
b = 1;
CALL L692;
V44 = 0;
CALL L694;
L326:
IF (V81) THEN GOTO L328;
A18[9..0] = $016;
CALL L458;
POP i;
DRSCAN V21, A26[(((i + 2) * V21) - 1)..((i + 1) * V21)];
PUSH i;
A18[9..0] = $01A;
CALL L458;
POP i;
DRSCAN V21, A26[(((i + 2) * V21) - 1)..((i + 1) * V21)];
PUSH i;
L328:
POP i;
NEXT i;
V15 = V30;
IF (!V39 || (V34 == 1)) THEN
GOTO L329;
IF (V74) THEN V42 = 9;
IF (!V74) THEN V42 = 11;
L329:
ENDPROC;
PROCEDURE L385 USES DEVICE_DATA, TEMP_DATA, L458, L712;
V30 = 0;
FOR j = 0 TO V1;
V31 = V30;
IF (((A17[j] & 1) == 0) ||
((A17[j] & 4) == 0) ||
((A17[j] & 8) != 0)) THEN GOTO L387;
V2 = A12[j];
IF (V11 >= (A0[V2] - 108)) THEN GOTO L386;
V31 = V31 + (A0[V2] - 1);
A28[V31 - V11] = 1;
IF (V11 < 108) THEN A28[(107 + V30) - V11] = 1;
GOTO L387;
L386:
IF ((A17[j] & 8) == 0) THEN V49 = 1;
A17[j] = A17[j] | 8;
L387:
V30 = V31 + 1;
NEXT j;
A18[9..0] = $01E;
CALL L458;
DRSCAN V30, A28[(V30 - 1)..0];
V30 = 0;
FOR j = 0 TO V1;
V31 = V30;
V2 = A12[j];
IF (((A17[j] & 1) == 0) ||
((A17[j] & 4) == 0) ||
((A17[j] & 8) != 0)) THEN GOTO L388;
V31 = V31 + (A0[V2] - 1);
A28[V31 - V11] = 0;
IF (V11 < 108) THEN A28[(107 + V30) - V11] = 0;
L388:
V30 = V31 + 1;
NEXT j;
IF (V49 && (V11 == V52)) THEN
CALL L712;
V10 = V11;
ENDPROC;
PROCEDURE L418 USES DEVICE_DATA, TEMP_DATA, L682, L458, L187;
V30 = V14;
IF (V49) THEN CALL L682;
V31 = V30 + (V23 - 1);
IF (V75) THEN GOTO L419;
A18[9..0] = $016;
CALL L458;
DRSCAN V23, A21[V31..V30];
V30 = V30 + V23;
V31 = V31 + V23;
A18[9..0] = $01A;
CALL L458;
DRSCAN V23, A21[V31..V30];
V30 = V30 + V23;
V31 = V31 + V23;
GOTO L420;
L419:
A18[9..0] = $016;
CALL L458;
DRSCAN V23, A29[(V23 - 1)..0];
A18[9..0] = $01A;
CALL L458;
DRSCAN V23, A29[(V23 - 1)..0];
L420:
CALL L187;
V14 = V30;
ENDPROC;
PROCEDURE L435 USES DEVICE_DATA, TEMP_DATA, L106, L682, L458
, L385, L418
;
IF (V107 == 0) THEN GOTO L449;
CALL L106;
FOR i = 0 TO V1;
IF (((A17[i] & V4) == 0) ||
((A17[i] & 4) == 0)) THEN GOTO L436;
IF (((V4 == 1) || (V4 == 256)) &&
((A17[i] & 16) == 0)) THEN
A17[i] = A17[i] | 8;
IF ((V4 == 2) &&
((A17[i] & 16) == 0)) THEN
A17[i] = A17[i] & ~4;
IF ((A17[i] & 16) != 0) THEN V75 = 1;
L436:
NEXT i;
IF (!V106 && (V75 == 0)) THEN
GOTO L449;
IF (V106 && (V75 == 0)) THEN
GOTO L441;
IF (V4 != 1) THEN GOTO L437;
V11 = 108;
CALL L385;
CALL L418;
GOTO L441;
L437:
V11 = 0;
L441:
IF (!V106) THEN GOTO L449;
IF (V4 == 1) THEN
A18[9..0] = $03E;
IF ((V4 == 2) || (V4 == 256)) THEN
A18[9..0] = $3FF;
CALL L458;
CALL L106;
V75 = 0;
FOR i = 0 TO V1;
IF (((A17[i] & V4) == 0) ||
((A17[i] & 4) == 0)) THEN GOTO L444;
IF ((A17[i] & 16) != 0) THEN GOTO L442;
A17[i] = A17[i] | 16;
GOTO L443;
L442:
A17[i] = A17[i] & ~16;
L443:
IF (((V4 == 1) || (V4 == 256)) &&
((A17[i] & 16) == 0)) THEN
A17[i] = A17[i] | 8;
IF ((V4 == 2) &&
((A17[i] & 16) == 0)) THEN
A17[i] = A17[i] & ~4;
IF ((A17[i] & 16) != 0) THEN V75 = 1;
L444:
NEXT i;
IF (V75 == 0) THEN GOTO L449;
IF (V4 != 1) THEN GOTO L445;
V11 = 108;
CALL L385;
CALL L418;
GOTO L449;
L445:
V11 = 0;
L449:
V75 = 0;
V44 = 0;
ENDPROC;
PROCEDURE L454 USES DEVICE_DATA, TEMP_DATA
, L455
;
IF (V4 == 1) THEN CALL L455;
ENDPROC;
PROCEDURE L455 USES DEVICE_DATA, TEMP_DATA;
FOR i = 0 TO V1;
V2 = A12[i];
IF (((A17[i] & V4) != 0) &&
((A17[i] & 4) != 0)) THEN
IF (A0[V2] > V32) THEN
V32 = A0[V2];
NEXT i;
V32 = V32 - 108;
ENDPROC;
PROCEDURE L458 USES DEVICE_DATA, TEMP_DATA;
PUSH i;
PUSH j;
V41 = 0;
V27 = 0;
IF (!V56) THEN GOTO L459;
V56 = 0;
V41 = 50;
IF (!USE_EXTEND_IR_DELAY_METHOD) THEN GOTO L459;
V27 = 50;
A32[49..0] = A30[49..0];
L459:
FOR i = 0 TO V1;
IF ((A17[i] & 8) != 0) THEN GOTO L460;
IF (((A17[i] & V4) != 0) &&
((A17[i] & 4) != 0)) THEN GOTO L462;
A33[(A25[i] - 1)..0] = A39[(A25[i] - 1)..0];
IF (((A17[i] & 1) != 0) &&
((A17[i] & 4) != 0)) THEN
A33[(A25[i] - 1)..0] = $03E;
A32[(V27 + (A25[i] - 1))..V27] = A33[(A25[i] - 1)..0];
V27 = V27 + A25[i];
GOTO L465;
L460:
IF ((A17[i] & 2) != 0) THEN GOTO L461;
A32[(V27 + 9)..V27] = $3FF;
IF ((A17[i] & 1) != 0) THEN
A32[(V27 + 9)..V27] = $03E;
V27 = V27 + 10;
GOTO L465;
L461:
IF (!V57) THEN GOTO L462;
A32[(V27 + 9)..V27] = $02A;
V27 = V27 + 10;
GOTO L465;
L462:
l = 0;
IF ((A18[20] == 1) && ((A17[i] & 64) != 0)) THEN
l = 10;
A32[(V27 + 9)..V27] = A18[(l + 9)..l];
V27 = V27 + 10;
GOTO L465;
L465:
NEXT i;
IF ((V41 == 0) || USE_EXTEND_IR_DELAY_METHOD) THEN
GOTO L466;
STATE DRPAUSE;
WAIT DRPAUSE, 5 USEC, DRPAUSE;
L466:
IRSCAN V27, A32[(V27 - 1)..0];
V57 = 0;
WAIT IRPAUSE, V83 USEC, IRPAUSE;
IF (V91) THEN GOTO L467;
STATE IDLE;
WAIT 3 CYCLES;
L467:
POP j;
POP i;
ENDPROC;
PROCEDURE L682 USES DEVICE_DATA, TEMP_DATA;
V23 = 0;
V24 = 0;
FOR i = 0 TO (V19 - 1);
A30[i] = 1;
NEXT i;
FOR i = 0 TO V1;
V25 = 1;
V26 = 1;
IF(V216) THEN V25 = 0;
IF(V216) THEN V26 = 0;
IF (((A17[i] & V4) == 0) ||
((A17[i] & 4) == 0) ||
((A17[i] & 8) != 0)) THEN GOTO L683;
V2 = A12[i];
IF(V216) THEN V2 = A105[i];
V25 = A1[V2];
V26 = A5[V2];
GOTO L684;
L683:
IF (V74 && !V216) THEN A30[V24] = 0;
L684:
V23 = V23 + V25;
V24 = V24 + V26;
NEXT i;
V49 = 0;
ENDPROC;
PROCEDURE L692 USES DEVICE_DATA, TEMP_DATA;
j = 0;
FOR i = 0 TO V1;
k = j;
IF (((A17[i] & 1) == 0) ||
((A17[i] & 4) == 0) ||
((A17[i] & 8) != 0)) THEN GOTO L693;
V2 = A12[i];
k = k + (A5[V2] - 1);
IF (V10 != A9[3 * (V2 - 1)]) THEN
GOTO L693;
V27 = (16 * (A6[V2] -
A9[(3 * (V2 - 1)) + 2])) -
A9[(3 * (V2 - 1)) + 1] - 1;
IF (V43) THEN A29[V27 + j] = b;
IF (V44) THEN A30[V27 + j] = b;
L693:
j = k + 1;
NEXT i;
ENDPROC;
PROCEDURE L694 USES DEVICE_DATA, TEMP_DATA;
j = 317;
IF (V51 == -1) THEN V51 = 0;
FOR i = 0 TO V1;
IF (((A17[i] & 1) == 0) ||
((A17[i] & 4) == 0)) THEN GOTO L695;
V2 = A12[i];
IF (V51 >= A9[3 * (V2 - 1)]) THEN
GOTO L695;
IF (j > (A9[3 * (V2 - 1)] - V51)) THEN
j = A9[3 * (V2 - 1)] - V51;
L695:
NEXT i;
IF (j != 317) THEN V51 = V51 + j;
IF (j == 317) THEN V51 = -1;
ENDPROC;
PROCEDURE L696 USES DEVICE_DATA, TEMP_DATA;
j = 0;
FOR i = 0 TO V1;
k = j;
IF (((A17[i] & 1) == 0) ||
((A17[i] & 4) == 0)) THEN GOTO L697;
V2 = A12[i];
k = k + (A5[V2] - 1);
V27 = (16 * (A6[V2] -
A10[(2 * (V2 - 1)) + 1])) -
A10[2 * (V2 - 1)] - 1;
A30[V27 + j] = b;
L697:
j = k + 1;
NEXT i;
ENDPROC;
PROCEDURE L712 USES DEVICE_DATA, TEMP_DATA;
j = 317;
FOR i = 0 TO V1;
IF (((A17[i] & 1) == 0) ||
((A17[i] & 4) == 0)) THEN GOTO L713;
V2 = A12[i];
IF (V52 >= (A0[V2] - 108)) THEN
GOTO L713;
IF (j > A0[V2]) THEN j = A0[V2];
L713:
NEXT i;
IF (j != 317) THEN V52 = j - 108;
IF (j == 317) THEN V52 = -1;
ENDPROC;
PROCEDURE L849 USES TEMP_DATA;
PUSH j;
i = 0;
FOR j = 0 to 31;
IF (ba[j] == 1) THEN i = i + (1<<j);
NEXT j;
POP j;
ENDPROC;
PROCEDURE L850 USES TEMP_DATA;
PUSH j;
ba[31..0] = $00000000;
FOR j = 0 to 31;
IF (i&(1<<j))!=0 THEN ba[j]=1;
NEXT j;
POP j;
ENDPROC;
' END OF FILE
CRC 310D;
